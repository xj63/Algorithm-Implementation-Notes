/* automatically generated by rust-bindgen 0.70.1 */

extern "C" {
    #[doc = " Merge two sorted array into one sorted array\n\n # Example\n\n int array[] = {1, 3, 5, 0, 3, 4, 4, 8};\n //                     ^split        ^len\n merge_two_sorted_array(8, array, 3);\n // array = {0, 1, 3, 3, 4, 4, 5, 8}"]
    pub fn merge_two_sorted_array(
        len: ::std::os::raw::c_uint,
        array: *mut ::std::os::raw::c_int,
        split: ::std::os::raw::c_uint,
    );
}
extern "C" {
    #[doc = " Bubble sort\n\n # Example\n\n int array[] = {1, 3, 5, 0, 3, 4, 4, 8};\n bubble_sort(8, array);\n // array = {0, 1, 3, 3, 4, 4, 5, 8}"]
    pub fn bubble_sort(len: ::std::os::raw::c_uint, array: *mut ::std::os::raw::c_int);
}
extern "C" {
    #[doc = " Selection sort\n\n # Example\n\n int array[] = {1, 3, 5, 0, 3, 4, 4, 8};\n selection_sort(8, array);\n // array = {0, 1, 3, 3, 4, 4, 5, 8}"]
    pub fn selection_sort(len: ::std::os::raw::c_uint, array: *mut ::std::os::raw::c_int);
}
extern "C" {
    #[doc = " Insertion sort\n\n # Example\n\n int array[] = {1, 3, 5, 0, 3, 4, 4, 8};\n insertion_sort(8, array);\n // array = {0, 1, 3, 3, 4, 4, 5, 8}"]
    pub fn insertion_sort(len: ::std::os::raw::c_uint, array: *mut ::std::os::raw::c_int);
}
extern "C" {
    #[doc = " Merge sort\n\n # Example\n\n int array[] = {1, 3, 5, 0, 3, 4, 4, 8};\n merge_sort(8, array);\n // array = {0, 1, 3, 3, 4, 4, 5, 8}"]
    pub fn merge_sort(len: ::std::os::raw::c_uint, array: *mut ::std::os::raw::c_int);
}
extern "C" {
    #[doc = " Merge sort parallel."]
    pub fn merge_sort_parallel(len: ::std::os::raw::c_uint, array: *mut ::std::os::raw::c_int);
}
extern "C" {
    #[doc = " c std qsort"]
    pub fn std_qsort(len: ::std::os::raw::c_uint, array: *mut ::std::os::raw::c_int);
}
